sensor:
- platform: template
  sensors:
    temperature_target:
      unit_of_measurement: '째C'
      value_template: '{{ state_attr("climate.toon_thermostat", "temperature") }}'
    temperature_current:
      unit_of_measurement: '째C'
      value_template: '{{ state_attr("climate.toon_thermostat", "current_temperature") }}'
    heating_target:
      unit_of_measurement: '째C'
      value_template: '{{ [0, states("sensor.temperature_target")|float - states("sensor.temperature_current")|float]|max|float }}'
#    heating_rate:
#      unit_of_measurement: 's'
#      value_template: >-
#        {% set starttime = as_timestamp(states.input_datetime.heating_started.state)|int %}
#        {% set endtime = as_timestamp(states.input_datetime.heating_stopped.state)|int %}
#        {% set starttemp = states.input_number.heating_start_temperature.state|float %}
#        {% set endtemp = states.input_number.heating_end_temperature.state|float %}
#        {% if (starttime < endtime and starttemp < endtemp ) %}
#          {{ (endtime - starttime) / ((endtemp - starttemp) / 0.5) }}
#        {% else %}
#          {{ value }}
#        {% endif %}
    heating_rate:
      unit_of_measurement: 's/째C'
      value_template: >-
        {% set starttime = as_timestamp(states("input_datetime.heating_started"))|int %}
        {% set endtime = as_timestamp(states("input_datetime.heating_stopped"))|int %}
        {% set starttemp = states("input_number.heating_start_temperature")|float %}
        {% set endtemp = states("input_number.heating_end_temperature")|float %}
        {% if (starttime < endtime and starttemp < endtemp ) %}
          {{ (endtime - starttime) / (endtemp - starttemp) }}
        {% else %}
          {{ 0 }}
        {% endif %}

- platform: statistics
  name: "Heating rate stats"
  entity_id: sensor.heating_rate
  sampling_size: 20

binary_sensor:
- platform: template
  sensors:
    heating_active:
      value_template: '{{ as_timestamp(states("input_datetime.heating_started"))|int > as_timestamp(states("input_datetime.heating_stopped"))|int }}'

input_datetime:
  heating_started:
    has_date: true
    has_time: true
  heating_stopped:
    has_date: true
    has_time: true

input_number:
  heating_start_temperature:
    initial: 0
    min: 0
    max: 50
    step: .5
  heating_end_temperature:
    initial: 0
    min: 0
    max: 50
    step: .5

automation:
  - alias: "Log start verwarmen"
    initial_state: 'on'
    trigger:
      platform: state
      entity_id: sensor.temperature_target
    condition:
      condition: and
      conditions:
        - condition: numeric_state
          entity_id: sensor.heating_target
          above: 0
        - condition: state
          entity_id: binary_sensor.heating_active
          state: 'off'
    action:
      - service: input_datetime.set_datetime
        entity_id: input_datetime.heating_started
        data_template:
          date: '{{ now().strftime("%Y-%m-%d") }}'
          time: '{{ now().strftime("%H:%M:%S") }}'
      - service: input_number.set_value
        entity_id: input_number.heating_start_temperature
        data_template:
          value: '{{ states("sensor.temperature_current") }}'

  - alias: "Log stop verwarmen"
    initial_state: 'on'
    trigger:
      platform: numeric_state
      entity_id: sensor.heating_target
      below: 0.5
    condition:
      condition: state
      entity_id: binary_sensor.heating_active
      state: 'on'
    action:
      - service: input_datetime.set_datetime
        entity_id: input_datetime.heating_stopped
        data_template:
          date: '{{ now().strftime("%Y-%m-%d") }}'
          time: '{{ now().strftime("%H:%M:%S") }}'
      - service: input_number.set_value
        entity_id: input_number.heating_end_temperature
        data_template:
          value: '{{ states("sensor.temperature_current") }}'

  - alias: "Start voorverwarmen"
    initial_state: on
    trigger:
      platform: time_pattern
      minutes: '/5'
    condition:
      condition: and
      conditions:
#        - condition: state
#          entity_id: binary_sensor.iemand_thuis
#          state: 'off'
        - condition: or
          conditions:
#            - condition: state
#              entity_id: binary_sensor.iemand_thuis
#              state: 'off'
#            - condition: and
#              conditions:
#                - condition: state
#                  entity_id: input_boolean.slapen
#                  state: 'on'
#                - condition: state
#                  entity_id: binary_sensor.workday
#                  state: 'off'
            - condition: and
              conditions:
                - condition: state
                  entity_id: binary_sensor.workday
                  state: 'on'
                - condition: state
                  entity_id: binary_sensor.iemand_thuis
                  state: 'off'
            - condition: state
              entity_id: binary_sensor.workday
              state: 'off'
        - condition: state
          entity_id: input_boolean.verwarming_override
          state: 'off'
        - condition: state
          entity_id: binary_sensor.heating_active
          state: 'off'
#        - condition: template
#          value_template: >-
#            {% set expected_temp = 20.0 %}
#            {% set current_temp = states.sensor.temperature_current.state|float %}
#            {% set diff_temp = expected_temp - current_temp %}
#            {% if (diff_temp <= 0) %}
#              false
#            {% else %}
#              {% set mean_heating_rate = states.sensor.heating_rate_stats_mean.state|float %}
#              {% set seconds_offset = (diff_temp / 0.5) * mean_heating_rate %}
#              {% set target_timestamp = states.input_datetime.verwarming_aan_tijd.attributes.timestamp|int %}
#              {% set current_timestamp = (now().hour * 3600) + (now().minute * 60) %}
#              current_timestamp >= target_timestamp - seconds_offset and current_timestamp < target_timestamp
#            {% endif %}
        - condition: template
          value_template: >-
            {% set expected_temp = 20.0 %}
            {% set current_temp = states("sensor.temperature_current")|float %}
            {% set diff_temp = expected_temp - current_temp %}
            {% if (diff_temp <= 0) %}
              false
            {% else %}
              {% set mean_heating_rate = states("sensor.heating_rate_stats_mean")|float %}
              {% set seconds_offset = (diff_temp|float * mean_heating_rate)|int %}
              {% set target_timestamp = state_attr("input_datetime.verwarming_aan_tijd", "timestamp")|int %}
              {% set current_timestamp = (now().hour * 3600) + (now().minute * 60) %}
              current_timestamp >= target_timestamp - seconds_offset and current_timestamp < target_timestamp
            {% endif %}
    action:
      service: system_log.write
      data_template:
        message: 'Voorverwarmen zou actief moeten zijn'
        level: warning